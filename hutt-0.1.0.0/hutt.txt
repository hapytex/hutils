-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package hutt
@version 0.1.0.0


-- | A module that defines functions that groups a list of elements into
--   subsequences.
module Data.List.Group

-- | Group the given list of items to a list of <a>NonEmpty</a> 2-tuples
--   with the "key" and the value for a given mapping function.
groupWith :: Eq b => (a -> b) -> [a] -> [(b, NonEmpty a)]

-- | Group the given list of items to a list of <a>NonEmpty</a> 2-tuples
--   with the "key" and the value for a given mapping function and
--   equavalence relation.
groupWith' :: (b -> b -> Bool) -> (a -> b) -> [a] -> [(b, NonEmpty a)]


-- | A module that works with lists of <a>Maybe</a>s.
module Data.List.Maybe

-- | A type synonym for a list of <a>Maybe</a> values.
type MaybeList a = [Maybe a]

-- | Concatenate the items wrapped in a <a>Just</a> when we perform a
--   mapping and concatenate the results of these mappings.
concatMapMaybes :: Foldable f => (a -> MaybeList b) -> f a -> [b]


-- | A module to convert Strings to a trie-based parser.
module Text.Parse.Trie

-- | Convert the given list of 2-tuples with a string to a trie-like
--   parser.
parseTrie :: Stream s m Char => [(String, a)] -> ParsecT s u m a
